from dataclasses import dataclass, field
from typing import ClassVar, Optional, Dict
@dataclass
class Order:
    time_placed: int
    order_id: int=field(init=False)
    side: str
    size: int
    symbol: Optional[str]
    agent_id: int #set to -1 for orders randomly generated by the exchange
    filled: Optional[bool] = False
    cancelled: Optional[bool]=False
    fill_time: Optional[int] = None
    cancel_time: Optional[int]=None
    _level: str=None #private method for internal use
    _order_id_counter: ClassVar[int]=1
    _orders: ClassVar[Dict[int, "Order"]]={}
    def __post_init__(self):
        self.order_id: int=Order._order_id_counter
        Order._order_id_counter+=1
        Order._orders[self.order_id]=self
    def ordertype(self) -> str:
        return str(self.__class__.__name__)
    
    @classmethod
    def _get_order_by_id(cls, id: int) -> Optional['Order']:
        return cls._orders.get(id)
@dataclass
class LimitOrder(Order):
    price: float=0
        
@dataclass
class MarketOrder(Order):
    total_value: Optional[float] = None #The total price for market orders
    pass
@dataclass
class CancelOrder(Order):
    price: int=0
    cancelID: int=0

